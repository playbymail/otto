// Code generated by pigeon; DO NOT EDIT.

package parser

// NB: including all the imports make the parser generator run a bit more quickly.
import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/playbymail/otto/wsj/ast"
)

// helper functions for the generated parser

// coerceExprList ensures that the expression list is never nil
func coerceExprList(v any) []ast.Expr {
	if v == nil {
		return []ast.Expr{}
	}
	return v.([]ast.Expr)
}

func coerceStatementList(v any) []ast.Stmt {
	if v == nil {
		return []ast.Stmt{}
	}
	items := v.([]interface{})
	list := make([]ast.Stmt, len(items))
	for i, s := range items {
		list[i] = s.(ast.Stmt)
	}
	return list
}

func coerceSuffixList(v any) []ast.Suffix {
	if v == nil {
		return []ast.Suffix{}
	}
	items := v.([]interface{})
	list := make([]ast.Suffix, len(items))
	for i, s := range items {
		list[i] = s.(ast.Suffix)
	}
	return list
}

func foldLeftBinary(left any, rest []interface{}) (ast.Expr, error) {
	result := left.(ast.Expr)

	for _, part := range rest {
		pair := part.([]interface{})
		op := pair[0].(string)
		right := pair[1].(ast.Expr)

		result = &ast.BinaryExpr{
			Left:     result,
			Operator: op,
			Right:    right,
			Pos:      result.Position(), // Or use position of operator if available
		}
	}

	return result, nil
}

func foldRightBinary(left any, rest []interface{}) (ast.Expr, error) {
	// Base case: no operators
	if len(rest) == 0 {
		return left.(ast.Expr), nil
	}

	// Right-to-left fold
	// Start from the rightmost pair and work backward
	last := rest[len(rest)-1].([]interface{})
	op := last[0].(string)
	right := last[1].(ast.Expr)

	// Fold tail recursively
	headExpr, err := foldRightBinary(left, rest[:len(rest)-1])
	if err != nil {
		return nil, err
	}

	return &ast.BinaryExpr{
		Left:     headExpr,
		Operator: op,
		Right:    right,
		Pos:      headExpr.Position(), // Optional: use operator position if available
	}, nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Program",
			pos:  position{line: 103, col: 1, offset: 2002},
			expr: &actionExpr{
				pos: position{line: 103, col: 12, offset: 2013},
				run: (*parser).callonProgram1,
				expr: &seqExpr{
					pos: position{line: 103, col: 12, offset: 2013},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 103, col: 12, offset: 2013},
							label: "stmts",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 18, offset: 2019},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 2019},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 29, offset: 2030},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 110, col: 1, offset: 2182},
			expr: &choiceExpr{
				pos: position{line: 110, col: 14, offset: 2195},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 110, col: 14, offset: 2195},
						run: (*parser).callonStatement2,
						expr: &labeledExpr{
							pos:   position{line: 110, col: 14, offset: 2195},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 16, offset: 2197},
								name: "LetStmt",
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 13, offset: 2235},
						run: (*parser).callonStatement5,
						expr: &labeledExpr{
							pos:   position{line: 111, col: 13, offset: 2235},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 15, offset: 2237},
								name: "AssignStmt",
							},
						},
					},
					&actionExpr{
						pos: position{line: 112, col: 13, offset: 2278},
						run: (*parser).callonStatement8,
						expr: &labeledExpr{
							pos:   position{line: 112, col: 13, offset: 2278},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 15, offset: 2280},
								name: "ExprStmt",
							},
						},
					},
				},
			},
		},
		{
			name: "LetStmt",
			pos:  position{line: 114, col: 1, offset: 2308},
			expr: &actionExpr{
				pos: position{line: 114, col: 12, offset: 2319},
				run: (*parser).callonLetStmt1,
				expr: &seqExpr{
					pos: position{line: 114, col: 12, offset: 2319},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 114, col: 12, offset: 2319},
							val:        "let",
							ignoreCase: false,
							want:       "\"let\"",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 18, offset: 2325},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 23, offset: 2330},
								name: "Ident",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 29, offset: 2336},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 33, offset: 2340},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 39, offset: 2346},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 50, offset: 2357},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "AssignStmt",
			pos:  position{line: 122, col: 1, offset: 2527},
			expr: &actionExpr{
				pos: position{line: 122, col: 15, offset: 2541},
				run: (*parser).callonAssignStmt1,
				expr: &seqExpr{
					pos: position{line: 122, col: 15, offset: 2541},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 122, col: 15, offset: 2541},
							label: "target",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 22, offset: 2548},
								name: "Target",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 29, offset: 2555},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 33, offset: 2559},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 39, offset: 2565},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 50, offset: 2576},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "Target",
			pos:  position{line: 130, col: 1, offset: 2752},
			expr: &actionExpr{
				pos: position{line: 130, col: 11, offset: 2762},
				run: (*parser).callonTarget1,
				expr: &seqExpr{
					pos: position{line: 130, col: 11, offset: 2762},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 130, col: 11, offset: 2762},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 16, offset: 2767},
								name: "Ident",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 22, offset: 2773},
							label: "suffix",
							expr: &zeroOrOneExpr{
								pos: position{line: 130, col: 29, offset: 2780},
								expr: &choiceExpr{
									pos: position{line: 130, col: 30, offset: 2781},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 130, col: 30, offset: 2781},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 130, col: 30, offset: 2781},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&ruleRefExpr{
													pos:  position{line: 130, col: 34, offset: 2785},
													name: "Ident",
												},
											},
										},
										&seqExpr{
											pos: position{line: 130, col: 42, offset: 2793},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 130, col: 42, offset: 2793},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 130, col: 46, offset: 2797},
													name: "Expression",
												},
												&litMatcher{
													pos:        position{line: 130, col: 57, offset: 2808},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprStmt",
			pos:  position{line: 156, col: 1, offset: 3396},
			expr: &actionExpr{
				pos: position{line: 156, col: 13, offset: 3408},
				run: (*parser).callonExprStmt1,
				expr: &seqExpr{
					pos: position{line: 156, col: 13, offset: 3408},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 156, col: 13, offset: 3408},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 156, col: 15, offset: 3410},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 156, col: 26, offset: 3421},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 164, col: 1, offset: 3576},
			expr: &actionExpr{
				pos: position{line: 164, col: 15, offset: 3590},
				run: (*parser).callonExpression1,
				expr: &labeledExpr{
					pos:   position{line: 164, col: 15, offset: 3590},
					label: "eq",
					expr: &ruleRefExpr{
						pos:  position{line: 164, col: 18, offset: 3593},
						name: "Equality",
					},
				},
			},
		},
		{
			name: "Equality",
			pos:  position{line: 168, col: 1, offset: 3626},
			expr: &actionExpr{
				pos: position{line: 168, col: 13, offset: 3638},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 168, col: 13, offset: 3638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 168, col: 13, offset: 3638},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 18, offset: 3643},
								name: "Comparison",
							},
						},
						&labeledExpr{
							pos:   position{line: 168, col: 29, offset: 3654},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 168, col: 34, offset: 3659},
								expr: &seqExpr{
									pos: position{line: 168, col: 35, offset: 3660},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 168, col: 37, offset: 3662},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 168, col: 37, offset: 3662},
													val:        "==",
													ignoreCase: false,
													want:       "\"==\"",
												},
												&litMatcher{
													pos:        position{line: 168, col: 44, offset: 3669},
													val:        "!=",
													ignoreCase: false,
													want:       "\"!=\"",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 168, col: 51, offset: 3676},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 168, col: 57, offset: 3682},
												name: "Comparison",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Comparison",
			pos:  position{line: 189, col: 1, offset: 4163},
			expr: &actionExpr{
				pos: position{line: 189, col: 15, offset: 4177},
				run: (*parser).callonComparison1,
				expr: &seqExpr{
					pos: position{line: 189, col: 15, offset: 4177},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 189, col: 15, offset: 4177},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 20, offset: 4182},
								name: "Term",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 25, offset: 4187},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 189, col: 30, offset: 4192},
								expr: &seqExpr{
									pos: position{line: 189, col: 31, offset: 4193},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 189, col: 32, offset: 4194},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 189, col: 32, offset: 4194},
													val:        ">",
													ignoreCase: false,
													want:       "\">\"",
												},
												&litMatcher{
													pos:        position{line: 189, col: 38, offset: 4200},
													val:        "<",
													ignoreCase: false,
													want:       "\"<\"",
												},
												&litMatcher{
													pos:        position{line: 189, col: 44, offset: 4206},
													val:        ">=",
													ignoreCase: false,
													want:       "\">=\"",
												},
												&litMatcher{
													pos:        position{line: 189, col: 51, offset: 4213},
													val:        "<=",
													ignoreCase: false,
													want:       "\"<=\"",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 189, col: 57, offset: 4219},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 189, col: 63, offset: 4225},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 207, col: 1, offset: 4536},
			expr: &actionExpr{
				pos: position{line: 207, col: 9, offset: 4544},
				run: (*parser).callonTerm1,
				expr: &seqExpr{
					pos: position{line: 207, col: 9, offset: 4544},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 207, col: 9, offset: 4544},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 14, offset: 4549},
								name: "Factor",
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 21, offset: 4556},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 207, col: 26, offset: 4561},
								expr: &seqExpr{
									pos: position{line: 207, col: 27, offset: 4562},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 207, col: 28, offset: 4563},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 207, col: 28, offset: 4563},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&litMatcher{
													pos:        position{line: 207, col: 34, offset: 4569},
													val:        "-",
													ignoreCase: false,
													want:       "\"-\"",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 207, col: 39, offset: 4574},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 207, col: 45, offset: 4580},
												name: "Factor",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Factor",
			pos:  position{line: 211, col: 1, offset: 4648},
			expr: &actionExpr{
				pos: position{line: 211, col: 11, offset: 4658},
				run: (*parser).callonFactor1,
				expr: &seqExpr{
					pos: position{line: 211, col: 11, offset: 4658},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 211, col: 11, offset: 4658},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 16, offset: 4663},
								name: "Unary",
							},
						},
						&labeledExpr{
							pos:   position{line: 211, col: 22, offset: 4669},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 211, col: 27, offset: 4674},
								expr: &seqExpr{
									pos: position{line: 211, col: 28, offset: 4675},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 211, col: 29, offset: 4676},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 211, col: 29, offset: 4676},
													val:        "*",
													ignoreCase: false,
													want:       "\"*\"",
												},
												&litMatcher{
													pos:        position{line: 211, col: 35, offset: 4682},
													val:        "/",
													ignoreCase: false,
													want:       "\"/\"",
												},
												&litMatcher{
													pos:        position{line: 211, col: 41, offset: 4688},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 211, col: 46, offset: 4693},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 211, col: 52, offset: 4699},
												name: "Unary",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Unary",
			pos:  position{line: 215, col: 1, offset: 4766},
			expr: &actionExpr{
				pos: position{line: 215, col: 10, offset: 4775},
				run: (*parser).callonUnary1,
				expr: &seqExpr{
					pos: position{line: 215, col: 10, offset: 4775},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 215, col: 10, offset: 4775},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 215, col: 13, offset: 4778},
								expr: &choiceExpr{
									pos: position{line: 215, col: 14, offset: 4779},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 215, col: 14, offset: 4779},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 215, col: 20, offset: 4785},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 26, offset: 4791},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 31, offset: 4796},
								name: "PostfixExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 229, col: 1, offset: 5036},
			expr: &choiceExpr{
				pos: position{line: 229, col: 12, offset: 5047},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 229, col: 12, offset: 5047},
						run: (*parser).callonPrimary2,
						expr: &labeledExpr{
							pos:   position{line: 229, col: 12, offset: 5047},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 14, offset: 5049},
								name: "Literal",
							},
						},
					},
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 5081},
						run: (*parser).callonPrimary5,
						expr: &labeledExpr{
							pos:   position{line: 231, col: 5, offset: 5081},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 7, offset: 5083},
								name: "Ident",
							},
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 5113},
						run: (*parser).callonPrimary8,
						expr: &seqExpr{
							pos: position{line: 233, col: 5, offset: 5113},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 233, col: 5, offset: 5113},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 233, col: 9, offset: 5117},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 233, col: 11, offset: 5119},
										name: "Expression",
									},
								},
								&litMatcher{
									pos:        position{line: 233, col: 22, offset: 5130},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostfixExpr",
			pos:  position{line: 237, col: 1, offset: 5157},
			expr: &actionExpr{
				pos: position{line: 237, col: 16, offset: 5172},
				run: (*parser).callonPostfixExpr1,
				expr: &seqExpr{
					pos: position{line: 237, col: 16, offset: 5172},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 16, offset: 5172},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 21, offset: 5177},
								name: "Primary",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 29, offset: 5185},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 34, offset: 5190},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 34, offset: 5190},
									name: "PostfixOp",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostfixOp",
			pos:  position{line: 242, col: 1, offset: 5306},
			expr: &choiceExpr{
				pos: position{line: 242, col: 14, offset: 5319},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 242, col: 14, offset: 5319},
						run: (*parser).callonPostfixOp2,
						expr: &labeledExpr{
							pos:   position{line: 242, col: 14, offset: 5319},
							label: "cs",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 17, offset: 5322},
								name: "CallOp",
							},
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 5354},
						run: (*parser).callonPostfixOp5,
						expr: &labeledExpr{
							pos:   position{line: 244, col: 5, offset: 5354},
							label: "is",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 8, offset: 5357},
								name: "IndexOp",
							},
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 5390},
						run: (*parser).callonPostfixOp8,
						expr: &labeledExpr{
							pos:   position{line: 246, col: 5, offset: 5390},
							label: "ms",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 8, offset: 5393},
								name: "MemberOp",
							},
						},
					},
				},
			},
		},
		{
			name: "CallOp",
			pos:  position{line: 250, col: 1, offset: 5426},
			expr: &actionExpr{
				pos: position{line: 250, col: 11, offset: 5436},
				run: (*parser).callonCallOp1,
				expr: &seqExpr{
					pos: position{line: 250, col: 11, offset: 5436},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 250, col: 11, offset: 5436},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 15, offset: 5440},
							label: "el",
							expr: &zeroOrOneExpr{
								pos: position{line: 250, col: 18, offset: 5443},
								expr: &ruleRefExpr{
									pos:  position{line: 250, col: 18, offset: 5443},
									name: "ExpressionList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 34, offset: 5459},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IndexOp",
			pos:  position{line: 257, col: 1, offset: 5600},
			expr: &actionExpr{
				pos: position{line: 257, col: 12, offset: 5611},
				run: (*parser).callonIndexOp1,
				expr: &seqExpr{
					pos: position{line: 257, col: 12, offset: 5611},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 257, col: 12, offset: 5611},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 16, offset: 5615},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 18, offset: 5617},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 29, offset: 5628},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "MemberOp",
			pos:  position{line: 264, col: 1, offset: 5765},
			expr: &actionExpr{
				pos: position{line: 264, col: 13, offset: 5777},
				run: (*parser).callonMemberOp1,
				expr: &seqExpr{
					pos: position{line: 264, col: 13, offset: 5777},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 264, col: 13, offset: 5777},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 17, offset: 5781},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 19, offset: 5783},
								name: "Ident",
							},
						},
					},
				},
			},
		},
		{
			name: "CallExpr",
			pos:  position{line: 278, col: 1, offset: 6234},
			expr: &actionExpr{
				pos: position{line: 278, col: 13, offset: 6246},
				run: (*parser).callonCallExpr1,
				expr: &seqExpr{
					pos: position{line: 278, col: 13, offset: 6246},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 278, col: 13, offset: 6246},
							label: "callee",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 20, offset: 6253},
								name: "Ident",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 26, offset: 6259},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 30, offset: 6263},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 35, offset: 6268},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 35, offset: 6268},
									name: "ExpressionList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 51, offset: 6284},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IndexExpr",
			pos:  position{line: 293, col: 1, offset: 6576},
			expr: &actionExpr{
				pos: position{line: 293, col: 14, offset: 6589},
				run: (*parser).callonIndexExpr1,
				expr: &seqExpr{
					pos: position{line: 293, col: 14, offset: 6589},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 293, col: 14, offset: 6589},
							label: "target",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 21, offset: 6596},
								name: "Primary",
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 29, offset: 6604},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 293, col: 33, offset: 6608},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 39, offset: 6614},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 50, offset: 6625},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "MemberExpr",
			pos:  position{line: 301, col: 1, offset: 6800},
			expr: &actionExpr{
				pos: position{line: 301, col: 15, offset: 6814},
				run: (*parser).callonMemberExpr1,
				expr: &seqExpr{
					pos: position{line: 301, col: 15, offset: 6814},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 301, col: 15, offset: 6814},
							label: "obj",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 19, offset: 6818},
								name: "Primary",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 27, offset: 6826},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 31, offset: 6830},
							label: "ident",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 37, offset: 6836},
								name: "Ident",
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionList",
			pos:  position{line: 309, col: 1, offset: 7013},
			expr: &actionExpr{
				pos: position{line: 309, col: 19, offset: 7031},
				run: (*parser).callonExpressionList1,
				expr: &seqExpr{
					pos: position{line: 309, col: 19, offset: 7031},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 309, col: 19, offset: 7031},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 25, offset: 7037},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 36, offset: 7048},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 309, col: 41, offset: 7053},
								expr: &seqExpr{
									pos: position{line: 309, col: 42, offset: 7054},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 309, col: 42, offset: 7054},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&labeledExpr{
											pos:   position{line: 309, col: 46, offset: 7058},
											label: "expr",
											expr: &ruleRefExpr{
												pos:  position{line: 309, col: 51, offset: 7063},
												name: "Expression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 319, col: 1, offset: 7317},
			expr: &choiceExpr{
				pos: position{line: 319, col: 12, offset: 7328},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 319, col: 12, offset: 7328},
						run: (*parser).callonLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 319, col: 12, offset: 7328},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 15, offset: 7331},
								name: "Number",
							},
						},
					},
					&actionExpr{
						pos: position{line: 321, col: 5, offset: 7363},
						run: (*parser).callonLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 321, col: 5, offset: 7363},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 7, offset: 7365},
								name: "String",
							},
						},
					},
					&actionExpr{
						pos: position{line: 326, col: 5, offset: 7506},
						run: (*parser).callonLiteral8,
						expr: &litMatcher{
							pos:        position{line: 326, col: 5, offset: 7506},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
					},
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 7639},
						run: (*parser).callonLiteral10,
						expr: &litMatcher{
							pos:        position{line: 331, col: 5, offset: 7639},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
					&actionExpr{
						pos: position{line: 336, col: 5, offset: 7774},
						run: (*parser).callonLiteral12,
						expr: &litMatcher{
							pos:        position{line: 336, col: 5, offset: 7774},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 343, col: 1, offset: 7905},
			expr: &choiceExpr{
				pos: position{line: 343, col: 11, offset: 7915},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 343, col: 11, offset: 7915},
						run: (*parser).callonNumber2,
						expr: &labeledExpr{
							pos:   position{line: 343, col: 11, offset: 7915},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 14, offset: 7918},
								name: "Float",
							},
						},
					},
					&actionExpr{
						pos: position{line: 343, col: 41, offset: 7945},
						run: (*parser).callonNumber5,
						expr: &labeledExpr{
							pos:   position{line: 343, col: 41, offset: 7945},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 44, offset: 7948},
								name: "Int",
							},
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 345, col: 1, offset: 7972},
			expr: &actionExpr{
				pos: position{line: 345, col: 10, offset: 7981},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 345, col: 10, offset: 7981},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 345, col: 10, offset: 7981},
							expr: &charClassMatcher{
								pos:        position{line: 345, col: 10, offset: 7981},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 17, offset: 7988},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 345, col: 21, offset: 7992},
							expr: &charClassMatcher{
								pos:        position{line: 345, col: 21, offset: 7992},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Int",
			pos:  position{line: 353, col: 1, offset: 8176},
			expr: &actionExpr{
				pos: position{line: 353, col: 8, offset: 8183},
				run: (*parser).callonInt1,
				expr: &oneOrMoreExpr{
					pos: position{line: 353, col: 8, offset: 8183},
					expr: &charClassMatcher{
						pos:        position{line: 353, col: 8, offset: 8183},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Ident",
			pos:  position{line: 361, col: 1, offset: 8364},
			expr: &actionExpr{
				pos: position{line: 361, col: 11, offset: 8374},
				run: (*parser).callonIdent1,
				expr: &seqExpr{
					pos: position{line: 361, col: 11, offset: 8374},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 361, col: 11, offset: 8374},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 361, col: 20, offset: 8383},
							expr: &charClassMatcher{
								pos:        position{line: 361, col: 20, offset: 8383},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 373, col: 1, offset: 8696},
			expr: &actionExpr{
				pos: position{line: 373, col: 11, offset: 8706},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 373, col: 11, offset: 8706},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 373, col: 11, offset: 8706},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 373, col: 16, offset: 8711},
							expr: &choiceExpr{
								pos: position{line: 373, col: 18, offset: 8713},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 373, col: 18, offset: 8713},
										val:        "[^\"\\\\]",
										chars:      []rune{'"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 373, col: 27, offset: 8722},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 373, col: 27, offset: 8722},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&anyMatcher{
												line: 373, col: 32, offset: 8727,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 373, col: 37, offset: 8732},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 377, col: 1, offset: 8773},
			expr: &notExpr{
				pos: position{line: 377, col: 8, offset: 8780},
				expr: &anyMatcher{
					line: 377, col: 9, offset: 8781,
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 378, col: 1, offset: 8783},
			expr: &charClassMatcher{
				pos:        position{line: 378, col: 10, offset: 8792},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "LETTER",
			pos:  position{line: 379, col: 1, offset: 8798},
			expr: &charClassMatcher{
				pos:        position{line: 379, col: 11, offset: 8808},
				val:        "[A-Z]",
				ranges:     []rune{'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SP",
			pos:  position{line: 380, col: 1, offset: 8814},
			expr: &oneOrMoreExpr{
				pos: position{line: 380, col: 7, offset: 8820},
				expr: &charClassMatcher{
					pos:        position{line: 380, col: 7, offset: 8820},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 381, col: 1, offset: 8827},
			expr: &zeroOrMoreExpr{
				pos: position{line: 381, col: 6, offset: 8832},
				expr: &charClassMatcher{
					pos:        position{line: 381, col: 6, offset: 8832},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
	},
}

func (c *current) onProgram1(stmts any) (any, error) {
	return &ast.Program{
		Statements: coerceStatementList(stmts),
		Pos:        ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonProgram1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram1(stack["stmts"])
}

func (c *current) onStatement2(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement2(stack["s"])
}

func (c *current) onStatement5(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement5(stack["s"])
}

func (c *current) onStatement8(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement8(stack["s"])
}

func (c *current) onLetStmt1(name, value any) (any, error) {
	return &ast.LetStmt{
		Name:  name.(*ast.Ident),
		Value: value.(ast.Expr),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLetStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetStmt1(stack["name"], stack["value"])
}

func (c *current) onAssignStmt1(target, value any) (any, error) {
	return &ast.AssignStmt{
		Target: target.(ast.Expr),
		Value:  value.(ast.Expr),
		Pos:    ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonAssignStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignStmt1(stack["target"], stack["value"])
}

func (c *current) onTarget1(base, suffix any) (any, error) {
	b := base.(*ast.Ident)
	if suffix == nil {
		return b, nil
	}

	pair := suffix.([]interface{})
	switch pair[0] {
	case ".":
		return &ast.MemberExpr{
			Object: b,
			Name:   pair[1].(*ast.Ident),
			Pos:    b.Position(), // or use c.Pos
		}, nil
	case "[":
		return &ast.IndexExpr{
			Target: b,
			Index:  pair[1].(ast.Expr),
			Pos:    b.Position(), // or use c.Pos
		}, nil
	default:
		return nil, fmt.Errorf("unexpected suffix operator %v", pair[0])
	}
}

func (p *parser) callonTarget1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTarget1(stack["base"], stack["suffix"])
}

func (c *current) onExprStmt1(e any) (any, error) {
	startOfExpression := e.(ast.Expr).Position()
	return &ast.ExprStmt{
		Expr: e.(ast.Expr),
		Pos:  startOfExpression,
	}, nil
}

func (p *parser) callonExprStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprStmt1(stack["e"])
}

func (c *current) onExpression1(eq any) (any, error) {
	return eq, nil
}

func (p *parser) callonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["eq"])
}

func (c *current) onEquality1(left, rest any) (any, error) {
	base := left.(ast.Expr)
	if rest == nil {
		return base, nil
	}

	for _, pair := range rest.([]interface{}) {
		opPair := pair.([]interface{})
		op := opPair[0].(string)
		right := opPair[1].(ast.Expr)

		base = &ast.BinaryExpr{
			Left:     base,
			Operator: op,
			Right:    right,
			Pos:      base.Position(), // or use op position if needed
		}
	}
	return base, nil
}

func (p *parser) callonEquality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["left"], stack["rest"])
}

func (c *current) onComparison1(left, rest any) (any, error) {
	l := left.(ast.Expr)
	if rest == nil {
		return l, nil
	}

	pair := rest.([]interface{})
	op := pair[0].(string)
	r := pair[1].(ast.Expr)

	return &ast.BinaryExpr{
		Left:     l,
		Operator: op,
		Right:    r,
		Pos:      l.Position(),
	}, nil
}

func (p *parser) callonComparison1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison1(stack["left"], stack["rest"])
}

func (c *current) onTerm1(left, rest any) (any, error) {
	return foldLeftBinary(left, rest.([]interface{}))
}

func (p *parser) callonTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm1(stack["left"], stack["rest"])
}

func (c *current) onFactor1(left, rest any) (any, error) {
	return foldLeftBinary(left, rest.([]interface{}))
}

func (p *parser) callonFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFactor1(stack["left"], stack["rest"])
}

func (c *current) onUnary1(op, expr any) (any, error) {
	e := expr.(ast.Expr)

	if op == nil {
		return e, nil
	}

	return &ast.UnaryExpr{
		Operator: op.(string),
		Expr:     e,
		Pos:      ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonUnary1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnary1(stack["op"], stack["expr"])
}

func (c *current) onPrimary2(l any) (any, error) {
	return l, nil
}

func (p *parser) callonPrimary2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary2(stack["l"])
}

func (c *current) onPrimary5(i any) (any, error) {
	return i, nil
}

func (p *parser) callonPrimary5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary5(stack["i"])
}

func (c *current) onPrimary8(e any) (any, error) {
	return e, nil
}

func (p *parser) callonPrimary8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary8(stack["e"])
}

func (c *current) onPostfixExpr1(base, rest any) (any, error) {
	suffixes := coerceSuffixList(rest)
	return ast.ApplySuffixes(base.(ast.Expr), suffixes), nil
}

func (p *parser) callonPostfixExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixExpr1(stack["base"], stack["rest"])
}

func (c *current) onPostfixOp2(cs any) (any, error) {
	return cs, nil
}

func (p *parser) callonPostfixOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixOp2(stack["cs"])
}

func (c *current) onPostfixOp5(is any) (any, error) {
	return is, nil
}

func (p *parser) callonPostfixOp5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixOp5(stack["is"])
}

func (c *current) onPostfixOp8(ms any) (any, error) {
	return ms, nil
}

func (p *parser) callonPostfixOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixOp8(stack["ms"])
}

func (c *current) onCallOp1(el any) (any, error) {
	return &ast.CallSuffix{
		Args: coerceExprList(el),
		Pos:  ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonCallOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallOp1(stack["el"])
}

func (c *current) onIndexOp1(e any) (any, error) {
	return &ast.IndexSuffix{
		Index: e.(ast.Expr),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonIndexOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexOp1(stack["e"])
}

func (c *current) onMemberOp1(i any) (any, error) {
	return &ast.MemberSuffix{
		Name: i.(*ast.Ident),
		Pos:  ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonMemberOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberOp1(stack["i"])
}

func (c *current) onCallExpr1(callee, args any) (any, error) {
	var exprs []ast.Expr
	if args != nil {
		exprs = args.([]ast.Expr)
	} else {
		exprs = []ast.Expr{}
	}

	return &ast.CallExpr{
		Callee: callee.(ast.Expr),
		Args:   exprs,
		Pos:    ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonCallExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpr1(stack["callee"], stack["args"])
}

func (c *current) onIndexExpr1(target, index any) (any, error) {
	return &ast.IndexExpr{
		Target: target.(ast.Expr),
		Index:  index.(ast.Expr),
		Pos:    ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonIndexExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpr1(stack["target"], stack["index"])
}

func (c *current) onMemberExpr1(obj, ident any) (any, error) {
	return &ast.MemberExpr{
		Object: obj.(ast.Expr),
		Name:   ident.(*ast.Ident),
		Pos:    ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonMemberExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpr1(stack["obj"], stack["ident"])
}

func (c *current) onExpressionList1(first, rest any) (any, error) {
	list := []ast.Expr{first.(ast.Expr)}
	for _, item := range rest.([]interface{}) {
		pair := item.([]interface{})
		expr := pair[1].(ast.Expr) // skip comma
		list = append(list, expr)
	}
	return list, nil
}

func (p *parser) callonExpressionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionList1(stack["first"], stack["rest"])
}

func (c *current) onLiteral2(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral2(stack["nl"])
}

func (c *current) onLiteral5(s any) (any, error) {
	return &ast.StringLiteral{
		Value: s.(string),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLiteral5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral5(stack["s"])
}

func (c *current) onLiteral8() (any, error) {
	return &ast.BoolLiteral{
		Value: true,
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLiteral8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral8()
}

func (c *current) onLiteral10() (any, error) {
	return &ast.BoolLiteral{
		Value: false,
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLiteral10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral10()
}

func (c *current) onLiteral12() (any, error) {
	return &ast.NullLiteral{
		Pos: ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
	return nil, nil
}

func (p *parser) callonLiteral12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral12()
}

func (c *current) onNumber2(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonNumber2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber2(stack["nl"])
}

func (c *current) onNumber5(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonNumber5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber5(stack["nl"])
}

func (c *current) onFloat1() (any, error) {
	f, err := strconv.ParseFloat(string(c.text), 64)
	return &ast.NumberLiteral{
		Value: f,
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, err
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInt1() (any, error) {
	i, err := strconv.Atoi(string(c.text))
	return &ast.NumberLiteral{
		Value: int64(i),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, err
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onIdent1() (any, error) {
	text := string(c.text)
	switch text {
	case "let", "true", "false", "null":
		return nil, fmt.Errorf("reserved keyword %q cannot be used as identifier", text)
	}
	return &ast.Ident{
		Name: text,
		Pos:  ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonIdent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdent1()
}

func (c *current) onString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
